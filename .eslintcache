[{"/home/johnrobertmcc/Documents/boggle/src/index.js":"1","/home/johnrobertmcc/Documents/boggle/src/App.jsx":"2","/home/johnrobertmcc/Documents/boggle/src/frontend/logic.js":"3","/home/johnrobertmcc/Documents/boggle/src/reportWebVitals.js":"4","/home/johnrobertmcc/Documents/boggle/src/frontend/game.jsx":"5"},{"size":500,"mtime":1611516448873,"results":"6","hashOfConfig":"7"},{"size":244,"mtime":1611959523765,"results":"8","hashOfConfig":"7"},{"size":825,"mtime":1611952635984,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1611516448873,"results":"10","hashOfConfig":"7"},{"size":8640,"mtime":1611963050383,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v0y162",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/home/johnrobertmcc/Documents/boggle/src/index.js",[],"/home/johnrobertmcc/Documents/boggle/src/App.jsx",[],"/home/johnrobertmcc/Documents/boggle/src/frontend/logic.js",[],"/home/johnrobertmcc/Documents/boggle/src/reportWebVitals.js",[],"/home/johnrobertmcc/Documents/boggle/src/frontend/game.jsx",["23","24","25","26"],"import React from 'react';\nimport * as BoggleBoard from './logic';\nimport data from './data/words_dictionary.json';\n\nconst board = new BoggleBoard.Board(4);\nconst baseState ={ \n            board, \n            collected: '', \n            time: {}, \n            seconds: 120,\n            letters: [],\n            positions: [],\n            found:[],\n            prevPos: null,\n            gameOn: false\n        }\n\nexport default class Game extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = baseState;\n        this.timer = 0;\n\n        this.startTimer = this.startTimer.bind(this);\n        this.printBoard = this.printBoard.bind(this);\n        this.countDown = this.countDown.bind(this);\n        this.shovelLetters = this.shovelLetters.bind(this);\n        this.checkPos = this.checkPos.bind(this);\n        this.checkForWord = this.checkForWord.bind(this);\n        this.validMove = this.validMove.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n        this.score = this.score.bind(this);\n    }\n\n\n    secondsToTime(secs){\n        let hours = Math.floor(secs / (60 * 60));\n\n        let divisor_for_minutes = secs % (60 * 60);\n        let minutes = Math.floor(divisor_for_minutes / 60);\n\n        let divisor_for_seconds = divisor_for_minutes % 60;\n        let seconds = Math.ceil(divisor_for_seconds);\n\n        let obj = {\n        \"h\": hours,\n        \"m\": minutes,\n        \"s\": seconds\n        };\n        return obj;\n    }\n\n    componentDidMount() {\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState({ time: timeLeftVar });\n    }\n\n    startTimer() {\n        if(this.timer === 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n        this.setState({gameOn: true})\n        }\n    }\n\n    countDown() {\n        // Remove one second, set state so a re-render happens.\n        let seconds = this.state.seconds - 1;\n            this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds,\n        });\n        \n        // Check if we're at zero.\n        if (seconds === 0) { \n            clearInterval(this.timer);\n            this.resetGame();\n        }\n    }\n\n    validMove(prevPos, pos){\n        let x = pos[0];\n        let y = pos[1];\n      \n        \n        if(prevPos !== null){\n            let x1 = prevPos[0];\n            let y1 = prevPos[1];\n            console.log(pos)\n            console.log(prevPos)\n\n            if(x1 === x && y - y1 !== 1){\n                //going up\n                return true;\n            }else if( x1 === x && y - y1 !== -1){\n                //going down\n                return true;\n            }else if(y === y1 && x - x1 !== 1){\n                //going left\n                return true;\n            }else if(y === y1 && x1 - x !== 1){\n                //going left\n                return true;\n            }else if(y - y1 === 1 && x1 - x === 1){\n                //going diagonal up\n                return true;\n            }else if(y1 - y === 1 && x1 - x === 1){\n                //going diagonal up\n                return true;\n            }else if(y - y1 === 1 && x - x1 === 1){\n                //going diagonal up\n                return true;\n            }else if(y1 - y === 1 && x - x1 === 1){\n                //going diagonal up\n                return true;\n            }\n            \n\n            \n        }\n       return prevPos === null ? true : false;\n    }\n\n\n    checkPos(a, b){\n        for(let i = 0; i < a.length; i++){\n            if(JSON.stringify(a[i]) === JSON.stringify(b)){\n                return false\n            }\n        }\n\n        return true\n    }\n\n    checkForWord(word){\n        let temp = word.join('').toLowerCase();   \n        \n        if(data[temp] === 1 && temp.length > 2 && !this.state.found.includes(temp)){\n            \n            this.setState({\n                found: this.state.found.concat(temp), \n                letters: [], \n                positions: [], \n                prevPos: null\n            })\n        }\n    }\n\n    shovelLetters(letter, pos){ \n        if(this.checkPos(this.state.positions, pos) && this.validMove(this.state.prevPos, pos)){\n            this.setState({\n                letters: this.state.letters.concat([letter]), \n                positions: this.state.positions.concat([pos]),\n                prevPos: pos\n            })\n        }\n    }\n\n    foundWords(){\n        let {found} = this.state;\n        let list = [];\n\n        for(let i = 0; i < found.length; i++){\n            list.push(<li className='words'>{found[i]}</li>)\n        }\n\n        return list;\n    }\n\n\n    printBoard(){\n        let {board, gameOn} = this.state;\n        let fin = []\n\n        for(let i = 0; i < board.grid.length; i++){\n            let temp = [];\n\n            for(let j = 0; j < board.grid.length; j++){\n                gameOn \n                ? \n                temp.push(\n                <p \n                className={this.checkPos(this.state.positions, [i, j]) ? 'letters' : 'test'}\n                onClick={() => this.shovelLetters(board.grid[i][j].props.children, [i, j])}\n                >\n                {board.grid[i][j].props.children}\n                </p>)\n                :\n                temp.push(<p className='letters'>X</p>)\n                \n            }\n\n            fin.push(<div>{temp}</div>)\n        }\n\n        return fin;\n\n    }\n\n    resetGame(){\n        board.resetBoard();\n        this.setState(baseState);\n        this.timer = 0;\n    }\n\n    score(){\n        let score = 0;\n        this.state.found.forEach(word => {\n            let length = word.length;\n            switch (length) {\n                case 5:\n                    score += 2;\n                    break;\n                case 6:\n                    score += 3;\n                    break;        \n                case 7:\n                    score += 4;\n                    break;        \n                case 8:\n                    score += 11;\n                    break;        \n                default:\n                    score += 1;  \n                    break;\n            }\n\n        })\n\n        return score;\n    }\n\n\n    render(){\n        let {gameOn, letters, time} = this.state;\n        return(\n            <div className='page'>\n                <h1 className='title'>Boggle</h1>\n                { gameOn \n                ?\n                <h3>{this.score()}</h3>\n                :\n                <h3 className='instructions'>Press the start button to play</h3>\n                }\n                {this.checkForWord(letters)}\n                <div className='dashboard'>\n\n                    <div className='left-side'>\n                        {gameOn \n                        ? \n                        `\n                        ${time.m} : ${time.s}`\n                        :\n                        null}\n                        <br></br>\n                        {gameOn \n                        ?\n                        <button onClick={() => this.resetGame()}>Reset</button>\n                        : \n                        <button onClick={ this.startTimer}> Start Timer </button>\n                        }\n                        <br></br>\n                        <button onClick={() => this.setState({letters:[], prevPos: null, positions: []})}>Clear Word</button>\n                        <div className='flex-footer'>\n                            <hr className='footer-sidebar'></hr>\n                            <div className='sidebar-icons'>\n                                <a href='https://github.com/johnrobertmcc' target=\"_blank\"><i className=\"fab fa-github\"></i></a>\n                                <a href='https://www.linkedin.com/in/jrmcc/' target=\"_blank\"><i className=\"fab fa-linkedin-in\"></i></a>\n                                <a href='https://angel.co/u/john-robert-mccann' target=\"_blank\"><i className=\"fab fa-angellist\"></i></a>\n                            </div>\n                            <br></br>\n                            <p className='sig'>created by <br></br><a className=\"personal\" href=\"https://www.johnrobertmcc.com/\" target=\"_blank\">John Robert McCann</a></p>\n                            \n                        </div>\n                    </div>\n                    \n                    <div className='game-board'>\n                        {this.printBoard()}\n                    </div>\n\n                    <div className='right-side'>\n                    <h5>Words Collected</h5>\n                    <ul className='found-list'>{this.foundWords()}</ul>\n                    </div>\n\n                </div>\n                {letters}\n            </div>\n        )\n    }\n}",{"ruleId":"27","severity":1,"message":"28","line":267,"column":76,"nodeType":"29","endLine":267,"endColumn":91},{"ruleId":"27","severity":1,"message":"28","line":268,"column":78,"nodeType":"29","endLine":268,"endColumn":93},{"ruleId":"27","severity":1,"message":"28","line":269,"column":81,"nodeType":"29","endLine":269,"endColumn":96},{"ruleId":"27","severity":1,"message":"28","line":272,"column":130,"nodeType":"29","endLine":272,"endColumn":145},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute"]