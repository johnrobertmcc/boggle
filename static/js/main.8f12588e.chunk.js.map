{"version":3,"sources":["frontend/logic.js","frontend/game.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Board","gridSize","this","grid","generateBoard","i","row","j","space","Place","push","className","place","position","generateImage","alphabet","Math","floor","random","length","toUpperCase","randomLetter","board","BoggleBoard","baseState","collected","time","seconds","letters","positions","found","prevPos","gameOn","Game","props","state","timer","startTimer","bind","printBoard","countDown","shovelLetters","checkPos","checkForWord","validMove","resetGame","score","secs","divisor_for_minutes","divisor_for_seconds","ceil","timeLeftVar","secondsToTime","setState","setInterval","clearInterval","pos","x","y","x1","y1","console","log","a","b","JSON","stringify","word","temp","join","toLowerCase","data","includes","concat","letter","list","fin","onClick","children","resetBoard","forEach","m","s","href","target","foundWords","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAAaA,EAAb,WAEE,WAAYC,GAAW,oBACrBC,KAAKC,KAAO,GACZD,KAAKD,SAAWA,EAChBC,KAAKE,gBALT,4DASI,IAAI,IAAIC,EAAI,EAAGA,EAAIH,KAAKD,SAAUI,IAAI,CAGpC,IAFA,IAAIC,EAAM,GAEFC,EAAI,EAAGA,EAAIL,KAAKD,SAAUM,IAAI,CACpC,IAAIC,EAAQ,IAAIC,EAAM,CAACJ,EAAEE,IACzBD,EAAII,KAAK,mBAAGC,UAAU,UAAb,SAAwBH,EAAMI,SAEzCV,KAAKC,KAAKO,KAAKJ,MAhBrB,mCAsBIJ,KAAKC,KAAO,GACZD,KAAKE,oBAvBT,KA4BMK,E,WAEJ,WAAYI,GAAU,oBACpBX,KAAKU,MAAQ,GACbV,KAAKW,SAAWA,EAChBX,KAAKY,gB,2DAIL,IAAMC,EAAW,yCACjB,OAAOA,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,SAASC,gB,sCAK7DlB,KAAKU,MAAMF,KAAKR,KAAKmB,oB,YCvCnBC,EAAQ,IAAIC,EAAkB,GAC9BC,EAAW,CACLF,QACAG,UAAW,GACXC,KAAM,GACNC,QAAS,IACTC,QAAS,GACTC,UAAW,GACXC,MAAM,GACNC,QAAS,KACTC,QAAQ,GAGCC,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQX,EACb,EAAKY,MAAQ,EAEb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBACrB,EAAKI,SAAW,EAAKA,SAASJ,KAAd,gBAChB,EAAKK,aAAe,EAAKA,aAAaL,KAAlB,gBACpB,EAAKM,UAAY,EAAKA,UAAUN,KAAf,gBACjB,EAAKO,UAAY,EAAKA,UAAUP,KAAf,gBACjB,EAAKQ,MAAQ,EAAKA,MAAMR,KAAX,gBAbE,E,0DAiBLS,GACV,IAEIC,EAAsBD,EAAI,KAG1BE,EAAsBD,EAAsB,GAQhD,MALU,CACV,EATYhC,KAAKC,MAAM8B,EAAI,MAU3B,EAPc/B,KAAKC,MAAM+B,EAAsB,IAQ/C,EALchC,KAAKkC,KAAKD,M,0CAWxB,IAAIE,EAAcjD,KAAKkD,cAAclD,KAAKiC,MAAMR,SAChDzB,KAAKmD,SAAS,CAAE3B,KAAMyB,M,mCAIJ,IAAfjD,KAAKkC,OAAelC,KAAKiC,MAAMR,QAAU,IAC5CzB,KAAKkC,MAAQkB,YAAYpD,KAAKsC,UAAW,KACzCtC,KAAKmD,SAAS,CAACrB,QAAQ,O,kCAMvB,IAAIL,EAAUzB,KAAKiC,MAAMR,QAAU,EAC/BzB,KAAKmD,SAAS,CACd3B,KAAMxB,KAAKkD,cAAczB,GACzBA,QAASA,IAIG,IAAZA,IACA4B,cAAcrD,KAAKkC,OACnBlC,KAAK2C,e,gCAIHd,EAASyB,GACf,IAAIC,EAAID,EAAI,GACRE,EAAIF,EAAI,GAGZ,GAAe,OAAZzB,EAAiB,CAChB,IAAI4B,EAAK5B,EAAQ,GACb6B,EAAK7B,EAAQ,GAIjB,GAHA8B,QAAQC,IAAIN,GACZK,QAAQC,IAAI/B,GAET4B,IAAOF,GAAKC,EAAIE,IAAO,EAEtB,OAAO,EACL,GAAID,IAAOF,GAAKC,EAAIE,KAAQ,EAE9B,OAAO,EACL,GAAGF,IAAME,GAAMH,EAAIE,IAAO,EAE5B,OAAO,EACL,GAAGD,IAAME,GAAMD,EAAKF,IAAM,EAE5B,OAAO,EACL,GAAGC,EAAIE,IAAO,GAAKD,EAAKF,IAAM,EAEhC,OAAO,EACL,GAAGG,EAAKF,IAAM,GAAKC,EAAKF,IAAM,EAEhC,OAAO,EACL,GAAGC,EAAIE,IAAO,GAAKH,EAAIE,IAAO,EAEhC,OAAO,EACL,GAAGC,EAAKF,IAAM,GAAKD,EAAIE,IAAO,EAEhC,OAAO,EAMhB,OAAmB,OAAZ5B,I,+BAIDgC,EAAGC,GACR,IAAI,IAAI3D,EAAI,EAAGA,EAAI0D,EAAE5C,OAAQd,IACzB,GAAG4D,KAAKC,UAAUH,EAAE1D,MAAQ4D,KAAKC,UAAUF,GACvC,OAAO,EAIf,OAAO,I,mCAGEG,GACT,IAAIC,EAAOD,EAAKE,KAAK,IAAIC,cAEP,IAAfC,EAAKH,IAAeA,EAAKjD,OAAS,IAAMjB,KAAKiC,MAAML,MAAM0C,SAASJ,IAEjElE,KAAKmD,SAAS,CACVvB,MAAO5B,KAAKiC,MAAML,MAAM2C,OAAOL,GAC/BxC,QAAS,GACTC,UAAW,GACXE,QAAS,S,oCAKP2C,EAAQlB,GACftD,KAAKwC,SAASxC,KAAKiC,MAAMN,UAAW2B,IAAQtD,KAAK0C,UAAU1C,KAAKiC,MAAMJ,QAASyB,IAC9EtD,KAAKmD,SAAS,CACVzB,QAAS1B,KAAKiC,MAAMP,QAAQ6C,OAAO,CAACC,IACpC7C,UAAW3B,KAAKiC,MAAMN,UAAU4C,OAAO,CAACjB,IACxCzB,QAASyB,M,mCASjB,IAJS,IACJ1B,EAAS5B,KAAKiC,MAAdL,MACD6C,EAAO,GAEHtE,EAAI,EAAGA,EAAIyB,EAAMX,OAAQd,IAC7BsE,EAAKjE,KAAK,oBAAIC,UAAU,QAAd,SAAuBmB,EAAMzB,MAG3C,OAAOsE,I,mCAQP,IAJS,IAAD,SACczE,KAAKiC,MAAtBb,EADG,EACHA,MAAOU,EADJ,EACIA,OACR4C,EAAM,GAFF,WAIAvE,GAGJ,IAFA,IAAI+D,EAAO,GALP,WAOI7D,GACJyB,EAEAoC,EAAK1D,KACL,mBACAC,UAAW,EAAK+B,SAAS,EAAKP,MAAMN,UAAW,CAACxB,EAAGE,IAAM,UAAY,OACrEsE,QAAS,kBAAM,EAAKpC,cAAcnB,EAAMnB,KAAKE,GAAGE,GAAG2B,MAAM4C,SAAU,CAACzE,EAAGE,KAFvE,SAICe,EAAMnB,KAAKE,GAAGE,GAAG2B,MAAM4C,YAGxBV,EAAK1D,KAAK,mBAAGC,UAAU,UAAb,iBAXNJ,EAAI,EAAGA,EAAIe,EAAMnB,KAAKgB,OAAQZ,IAAK,EAAnCA,GAeRqE,EAAIlE,KAAK,8BAAM0D,MAlBX/D,EAAI,EAAGA,EAAIiB,EAAMnB,KAAKgB,OAAQd,IAAK,EAAnCA,GAqBR,OAAOuE,I,kCAKPtD,EAAMyD,aACN7E,KAAKmD,SAAS7B,GACdtB,KAAKkC,MAAQ,I,8BAIb,IAAIU,EAAQ,EAuBZ,OAtBA5C,KAAKiC,MAAML,MAAMkD,SAAQ,SAAAb,GAErB,OADaA,EAAKhD,QAEd,KAAK,EACD2B,GAAS,EACT,MACJ,KAAK,EACDA,GAAS,EACT,MACJ,KAAK,EACDA,GAAS,EACT,MACJ,KAAK,EACDA,GAAS,GACT,MACJ,QACIA,GAAS,MAMdA,I,+BAIF,IAAD,SAC0B5C,KAAKiC,MAA9BH,EADD,EACCA,OAAQJ,EADT,EACSA,QAASF,EADlB,EACkBA,KACtB,OACI,sBAAKf,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,oBACEqB,EAEF,6BAAK9B,KAAK4C,UAEV,oBAAInC,UAAU,eAAd,4CAECT,KAAKyC,aAAaf,GACnB,sBAAKjB,UAAU,YAAf,UAEI,sBAAKA,UAAU,YAAf,UACKqB,EAAM,oCAGLN,EAAKuD,EAHA,cAGOvD,EAAKwD,GAEnB,KACA,uBACClD,EAED,wBAAQ6C,QAAS,kBAAM,EAAKhC,aAA5B,mBAEA,wBAAQgC,QAAU3E,KAAKmC,WAAvB,2BAEA,uBACA,wBAAQwC,QAAS,kBAAM,EAAKxB,SAAS,CAACzB,QAAQ,GAAIG,QAAS,KAAMF,UAAW,MAA5E,wBACA,sBAAKlB,UAAU,cAAf,UACI,oBAAIA,UAAU,mBACd,sBAAKA,UAAU,gBAAf,UACI,mBAAGwE,KAAK,mCAAmCC,OAAO,SAAlD,SAA2D,mBAAGzE,UAAU,oBACxE,mBAAGwE,KAAK,qCAAqCC,OAAO,SAApD,SAA6D,mBAAGzE,UAAU,yBAC1E,mBAAGwE,KAAK,wCAAwCC,OAAO,SAAvD,SAAgE,mBAAGzE,UAAU,0BAEjF,uBACA,oBAAGA,UAAU,MAAb,wBAA8B,uBAAS,mBAAGA,UAAU,WAAWwE,KAAK,iCAAiCC,OAAO,SAArE,yCAK/C,qBAAKzE,UAAU,aAAf,SACKT,KAAKqC,eAGV,sBAAK5B,UAAU,aAAf,UACA,iDACA,oBAAIA,UAAU,aAAd,SAA4BT,KAAKmF,qBAIpCzD,S,GA7QiB0D,IAAMC,WCFzBC,E,uKARX,OACI,qBAAK7E,UAAU,MAAf,SACE,cAAC,EAAD,U,GALQ2E,IAAMC,WCQTE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8f12588e.chunk.js","sourcesContent":["export class Board {\n\n  constructor(gridSize) {\n    this.grid = []\n    this.gridSize = gridSize\n    this.generateBoard();\n  }\n\n  generateBoard() {\n    for(let i = 0; i < this.gridSize; i++){\n      let row = [];\n\n      for(let j = 0; j < this.gridSize; j++){\n        let space = new Place([i,j]);\n        row.push(<p className='letters'>{space.place}</p>)\n      }\n      this.grid.push(row)\n    }\n  \n  }\n\n  resetBoard(){\n    this.grid = [];\n    this.generateBoard();\n  }\n}\n\n\nclass Place{\n\n  constructor(position){\n    this.place = [];\n    this.position = position;\n    this.generateImage();\n  }\n\n  randomLetter(){\n    const alphabet = \"aaaabcdeeeefghiiiijklmnoooopqrstuvwxyz\"\n    return alphabet[Math.floor(Math.random() * alphabet.length)].toUpperCase()\n  }\n\n\n  generateImage(){\n    this.place.push(this.randomLetter())\n  }\n}\n","import React from 'react';\nimport * as BoggleBoard from './logic';\nimport data from './data/words_dictionary.json';\n\nconst board = new BoggleBoard.Board(4);\nconst baseState ={ \n            board, \n            collected: '', \n            time: {}, \n            seconds: 120,\n            letters: [],\n            positions: [],\n            found:[],\n            prevPos: null,\n            gameOn: false\n        }\n\nexport default class Game extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = baseState;\n        this.timer = 0;\n\n        this.startTimer = this.startTimer.bind(this);\n        this.printBoard = this.printBoard.bind(this);\n        this.countDown = this.countDown.bind(this);\n        this.shovelLetters = this.shovelLetters.bind(this);\n        this.checkPos = this.checkPos.bind(this);\n        this.checkForWord = this.checkForWord.bind(this);\n        this.validMove = this.validMove.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n        this.score = this.score.bind(this);\n    }\n\n\n    secondsToTime(secs){\n        let hours = Math.floor(secs / (60 * 60));\n\n        let divisor_for_minutes = secs % (60 * 60);\n        let minutes = Math.floor(divisor_for_minutes / 60);\n\n        let divisor_for_seconds = divisor_for_minutes % 60;\n        let seconds = Math.ceil(divisor_for_seconds);\n\n        let obj = {\n        \"h\": hours,\n        \"m\": minutes,\n        \"s\": seconds\n        };\n        return obj;\n    }\n\n    componentDidMount() {\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState({ time: timeLeftVar });\n    }\n\n    startTimer() {\n        if(this.timer === 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n        this.setState({gameOn: true})\n        }\n    }\n\n    countDown() {\n        // Remove one second, set state so a re-render happens.\n        let seconds = this.state.seconds - 1;\n            this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds,\n        });\n        \n        // Check if we're at zero.\n        if (seconds === 0) { \n            clearInterval(this.timer);\n            this.resetGame();\n        }\n    }\n\n    validMove(prevPos, pos){\n        let x = pos[0];\n        let y = pos[1];\n      \n        \n        if(prevPos !== null){\n            let x1 = prevPos[0];\n            let y1 = prevPos[1];\n            console.log(pos)\n            console.log(prevPos)\n\n            if(x1 === x && y - y1 !== 1){\n                //going up\n                return true;\n            }else if( x1 === x && y - y1 !== -1){\n                //going down\n                return true;\n            }else if(y === y1 && x - x1 !== 1){\n                //going left\n                return true;\n            }else if(y === y1 && x1 - x !== 1){\n                //going left\n                return true;\n            }else if(y - y1 === 1 && x1 - x === 1){\n                //going diagonal up\n                return true;\n            }else if(y1 - y === 1 && x1 - x === 1){\n                //going diagonal up\n                return true;\n            }else if(y - y1 === 1 && x - x1 === 1){\n                //going diagonal up\n                return true;\n            }else if(y1 - y === 1 && x - x1 === 1){\n                //going diagonal up\n                return true;\n            }\n            \n\n            \n        }\n       return prevPos === null ? true : false;\n    }\n\n\n    checkPos(a, b){\n        for(let i = 0; i < a.length; i++){\n            if(JSON.stringify(a[i]) === JSON.stringify(b)){\n                return false\n            }\n        }\n\n        return true\n    }\n\n    checkForWord(word){\n        let temp = word.join('').toLowerCase();   \n        \n        if(data[temp] === 1 && temp.length > 2 && !this.state.found.includes(temp)){\n            \n            this.setState({\n                found: this.state.found.concat(temp), \n                letters: [], \n                positions: [], \n                prevPos: null\n            })\n        }\n    }\n\n    shovelLetters(letter, pos){ \n        if(this.checkPos(this.state.positions, pos) && this.validMove(this.state.prevPos, pos)){\n            this.setState({\n                letters: this.state.letters.concat([letter]), \n                positions: this.state.positions.concat([pos]),\n                prevPos: pos\n            })\n        }\n    }\n\n    foundWords(){\n        let {found} = this.state;\n        let list = [];\n\n        for(let i = 0; i < found.length; i++){\n            list.push(<li className='words'>{found[i]}</li>)\n        }\n\n        return list;\n    }\n\n\n    printBoard(){\n        let {board, gameOn} = this.state;\n        let fin = []\n\n        for(let i = 0; i < board.grid.length; i++){\n            let temp = [];\n\n            for(let j = 0; j < board.grid.length; j++){\n                gameOn \n                ? \n                temp.push(\n                <p \n                className={this.checkPos(this.state.positions, [i, j]) ? 'letters' : 'test'}\n                onClick={() => this.shovelLetters(board.grid[i][j].props.children, [i, j])}\n                >\n                {board.grid[i][j].props.children}\n                </p>)\n                :\n                temp.push(<p className='letters'>X</p>)\n                \n            }\n\n            fin.push(<div>{temp}</div>)\n        }\n\n        return fin;\n\n    }\n\n    resetGame(){\n        board.resetBoard();\n        this.setState(baseState);\n        this.timer = 0;\n    }\n\n    score(){\n        let score = 0;\n        this.state.found.forEach(word => {\n            let length = word.length;\n            switch (length) {\n                case 5:\n                    score += 2;\n                    break;\n                case 6:\n                    score += 3;\n                    break;        \n                case 7:\n                    score += 4;\n                    break;        \n                case 8:\n                    score += 11;\n                    break;        \n                default:\n                    score += 1;  \n                    break;\n            }\n\n        })\n\n        return score;\n    }\n\n\n    render(){\n        let {gameOn, letters, time} = this.state;\n        return(\n            <div className='page'>\n                <h1 className='title'>Boggle</h1>\n                { gameOn \n                ?\n                <h3>{this.score()}</h3>\n                :\n                <h3 className='instructions'>Press the start button to play</h3>\n                }\n                {this.checkForWord(letters)}\n                <div className='dashboard'>\n\n                    <div className='left-side'>\n                        {gameOn \n                        ? \n                        `\n                        ${time.m} : ${time.s}`\n                        :\n                        null}\n                        <br></br>\n                        {gameOn \n                        ?\n                        <button onClick={() => this.resetGame()}>Reset</button>\n                        : \n                        <button onClick={ this.startTimer}> Start Timer </button>\n                        }\n                        <br></br>\n                        <button onClick={() => this.setState({letters:[], prevPos: null, positions: []})}>Clear Word</button>\n                        <div className='flex-footer'>\n                            <hr className='footer-sidebar'></hr>\n                            <div className='sidebar-icons'>\n                                <a href='https://github.com/johnrobertmcc' target=\"_blank\"><i className=\"fab fa-github\"></i></a>\n                                <a href='https://www.linkedin.com/in/jrmcc/' target=\"_blank\"><i className=\"fab fa-linkedin-in\"></i></a>\n                                <a href='https://angel.co/u/john-robert-mccann' target=\"_blank\"><i className=\"fab fa-angellist\"></i></a>\n                            </div>\n                            <br></br>\n                            <p className='sig'>created by <br></br><a className=\"personal\" href=\"https://www.johnrobertmcc.com/\" target=\"_blank\">John Robert McCann</a></p>\n                            \n                        </div>\n                    </div>\n                    \n                    <div className='game-board'>\n                        {this.printBoard()}\n                    </div>\n\n                    <div className='right-side'>\n                    <h5>Words Collected</h5>\n                    <ul className='found-list'>{this.foundWords()}</ul>\n                    </div>\n\n                </div>\n                {letters}\n            </div>\n        )\n    }\n}","import './App.css';\nimport React from 'react';\nimport Game from './frontend/game';\n\nclass App extends React.Component {\n  render(){\n\n    return (\n        <div className=\"App\">\n          <Game />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}